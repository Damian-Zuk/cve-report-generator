'''
    Generate a vulnerability (CVE) report of the IoT device's:
    - Firmware version
    - Services running on open ports
    - Operating system
    
    The reports (json format) can be displayed through 'report_viewer.html' file.
    You can also use it to view your 'devices.json' file as it has the same structure as the generated output.
    Script configuration settings can be modified in the 'config.ini' file.

    Command line arguments:
    - Config filepath (default: config.ini)

    GitHub: https://github.com/Damian-Zuk/cve-report-generator
    Last Modification Date: 14-01-2024
'''

import nvdlib
import xml.etree.ElementTree as XMLElementTree
import json
import glob
import os
import sys
import configparser


def ensure_cpe_23_format(cpe):
    if cpe.startswith('cpe:2.3:'): 
        return cpe
    parts = cpe.split(':')
    if len(parts) < 4:
        raise ValueError('Invalid CPE 2.2 string format')
    cpe_23 = ('cpe:2.3:' + ':'.join(parts[1:]) + ':*' * (7 - len(parts[1:]))).replace('/', '')
    return cpe_23


def cpe_short(cpe_23):
    parts = cpe_23.split(':')
    return ':'.join([parts[3], parts[4], parts[5]])


def cpe_lookup(search_keyword, api_key, out):
    print(f"[GET CPE] keyword='{search_keyword}' ...")
    response = nvdlib.searchCPE(keywordSearch=search_keyword, key=(api_key if api_key else None), delay=(0.6 if api_key else None))
    count = len(response)
    if count: 
        cpe = response[0].cpeName 
        out['cpe'] = cpe
    print(f"[CPE RESPONSE] ({count=}) {(cpe_short(cpe)) if count else ''}\n")


def cve_lookup(search_by, software_type, key_store, api_key, out, search_by_cpe=True):
    if search_by_cpe:
        # Search CVEs by CPE
        print(f"[GET CVE] cpe_short={cpe_short(search_by)} ...")
        response = nvdlib.searchCVE(cpeName=search_by, key=(api_key if api_key else None), delay=(0.6 if api_key else None))
    else:
        # Search CVEs by keyword (for devices that CPE search did not return any entries: details['cpe'] is missing)
        print(f"[GET CVE] keyword='{search_by}' ...")
        response = nvdlib.searchCVE(keywordSearch=search_by, key=(api_key if api_key else None), delay=(0.6 if api_key else None))
        if len(response):
            # Store CPE (based on found vulnerability)
            out['cpe'] = response[0].cpe[0].criteria

    count = len(response)
    print(f"[CVE RESPONSE] response: {count=}\n")
    if not count:
        return False
        
    # CVE list output store function
    def compose_cve_list(response, key_store, out):
        out[key_store] = {
            'cve_total': len(response),
            'cve_list': [{
                'id': cve.id,
                'published': cve.published,
                'description': cve.descriptions[0].value,
                'metric':   cve.score[0],
                'score':    cve.score[1],
                'severity': cve.score[2]
            } for cve in response ]
        }

    # Create dictionary in output buffer for software type (firmware, service, os)
    out['vulnerabilities'].setdefault(software_type, {})
    if software_type == 'firmware':
        # Firmware (vulnerability output) has no key_store parameter
        compose_cve_list(response, 'firmware', out['vulnerabilities'])
    else:
        compose_cve_list(response, key_store, out['vulnerabilities'][software_type])
    return True


def devices_retrive_cpe(ignore_nvd_check_os_list, nist_api_key, out):
    for i, details in enumerate(out):
        model = details.get('model', '')
        firmware_version = details.get('firmware_version', '')
        
        # Get firmware CPE
        if model or firmware_version:
            if 'cpe' not in out:
                search_keyword = f"{model} {firmware_version}"
                cpe_lookup(search_keyword.strip(), nist_api_key, out[i])

        # Get port services CPE
        port_services = details.get('port_services', {})
        for port, service in port_services.items():
            if 'cpe' in service: 
                continue
            product = service.get('product', '')
            version = service.get('version', '')
            if not product: 
                continue
            search_keyword = f"{product} {version}"
            cpe_lookup(search_keyword.strip(), nist_api_key, out[i]['port_services'][port])

        # Get operating system CPE
        if 'os' in details:
            for k, os_class in enumerate(details['os'].get('class', [])):
                if 'cpe' in os_class: 
                    continue
                os_family = os_class.get('family', '')
                os_version = os_class.get('version', '')
                if os_family.lower() in ignore_nvd_check_os_list: 
                    continue
                search_keyword = f"{details['os']['name']} {os_family} {os_version}"
                cpe_lookup(search_keyword.strip(), nist_api_key, out[i]['os']['class'][k])


def generate_cve_report(ignore_nvd_check_os_list, nist_api_key, out):
    for i, details in enumerate(out):
        out[i]['vulnerabilities'] = {}

        # Software vulnerabilities
        if 'cpe' in details:
            cve_lookup(details['cpe'], 'firmware', '', nist_api_key, out[i])
        elif 'model' in details or 'firmware_version' in details:
            # CPE not found, try search CVE by keyword (model + version)
            search_keyword = f"{details.get('model', '')} {details.get('firmware_version', '')}".strip()
            if search_keyword:
                print("*** CPE is missing. Trying to search CVE by keyword. ***")
                cve_lookup(search_keyword, 'firmware', '', nist_api_key, out[i], False)
                # TODO: If no CVE found then search CVE by device model only 
                # and compare firmware version to: CVE.configurations.nodes.versionEndIncluding (response)

        # Services vulnerabilities
        if 'port_services' in details:   
            for service in details['port_services'].values():
                if 'cpe' in service:
                    service_key = f"{service['product']} {service['version']}"
                    cve_lookup(service['cpe'], 'service', service_key, nist_api_key, out[i])

        # OS vulnerabilities
        if 'os' in details:
            for os_class in details['os'].get('class', []):
                if os_class.get('family', '').lower() in ignore_nvd_check_os_list:
                    out[i]['vulnerabilities']['os'] = {"message": "NIST NVD check omitted."}
                    continue
                if 'cpe' in os_class:
                    os_key = f"{os_class['family']} {os_class['version']}"
                    cve_lookup(os_class['cpe'], 'os', os_key, nist_api_key, out[i])


def process_nmap_scan_xml(xml_content, out):
    xml_root = XMLElementTree.fromstring(xml_content)
    for host in xml_root.findall('host'):
        ipv4_xml = host.find("address[@addrtype='ipv4']")
        mac_xml = host.find("address[@addrtype='mac']")
        
        out_host = None # Device output entry reference (out[x])

        # Check if host is defined in devices.json (by MAC address)
        if mac_xml is not None:
            mac_address = mac_xml.get('addr')
            for i, device in enumerate(out):
                if device.get('mac_address') == mac_address:
                    out_host = out[i]
                    break
        
        # Create new entry: host not defined in devices.json.
        if out_host is None:
            out.append({'mac_address': mac_address} if mac_xml is not None else {})
            out_host = out[-1]

        if ipv4_xml is not None: out_host['ipv4'] = ipv4_xml.get('addr')
        if mac_xml is not None: out_host['vendor'] = mac_xml.get('vendor')

        # Get open ports and running services information
        ports_xml = host.find('ports')
        if ports_xml is not None:
            out_host.setdefault('port_services', {})

            for port_xml in ports_xml.findall('port'):
                if port_xml.find("state[@state='open']") is None:
                    continue
                
                port_id = port_xml.get('portid')
                service_xml = port_xml.find('service')

                # Skip if port is defined in devices.json
                if port_id in out_host['port_services']: 
                    continue
                
                # Output refrence (shorter name)
                out_ps = out_host['port_services']

                if service_xml is None:
                    out_ps[port_id] = {'name': 'unknown'}
                    continue

                out_ps[port_id] = {'name': service_xml.get('name')}
        
                product = service_xml.get('product')
                if product: out_ps[port_id]['product'] = product

                version = service_xml.get('version')
                if version: out_ps[port_id]['version'] = version

                cpe = service_xml.find('cpe')
                if cpe: out_ps[port_id]['cpe'] = ensure_cpe_23_format(cpe.text)

        # Get operating system details (if not defined in devices.json)
        os_xml = host.find('os')
        if 'os' not in out_host and os_xml is not None:
            os_match_xml = os_xml.find('osmatch')
            out_host['os'] = { 'nmap_match': True }
            out_host['os']['name'] = os_match_xml.get('name')
            out_host['os']['accuracy'] = os_match_xml.get('accuracy')
            out_host['os']['class'] = [{
                    'vendor': class_xml.get('vendor'),
                    'family': class_xml.get('osfamily'),
                    'version': class_xml.get('osgen'),
                    'accuracy': class_xml.get('accuracy'),
                    'cpe': ensure_cpe_23_format(class_xml.find('cpe').text)
                } for class_xml in os_match_xml.findall('osclass') ]


def main():
    # Output buffer (report)
    output = []

    # Load application config
    config_filepath = sys.argv[1] if len(sys.argv) > 1 else 'config.ini'
    if not os.path.isfile(config_filepath):
        raise FileNotFoundError(f"{config_filepath} does not exists")
    config = configparser.ConfigParser()
    config.read(config_filepath)

    config_output_filepath = config.get('cve-report-generator', 'output_filepath')
    config_devices_filepath = config.get('cve-report-generator', 'devices_filepath')
    config_nmap_scans_path = config.get('cve-report-generator', 'nmap_scans_path')
    config_nist_api_key = config.get('cve-report-generator', 'nist_nvd_api_key')
    config_ignore_os_nvd_check = [x.strip().lower() for x in config.get('cve-report-generator', 'ignore_os_nvd_check').split(',')]

    print(f'\n{config_output_filepath = }')
    print(f'{config_devices_filepath = }')
    print(f'{config_nmap_scans_path = }')
    print(f'{config_ignore_os_nvd_check = }')

    # Load and process devices list (model and firmware version)
    if len(config_devices_filepath):
        print(f"\nLoading device list file: '{config_devices_filepath}' ...\n")
        with open(config_devices_filepath) as file:
            output = json.loads(file.read())

    def get_nmap_xml_files(path):
        return [fp.replace('\\', '/') for fp in glob.glob(os.path.join(path[:-1], '*.xml'))] if path[-1] == '*' else path

    # Load and process devices nmap scans (XML)
    if len(config_nmap_scans_path):
        for filepath in get_nmap_xml_files(config_nmap_scans_path):
            print(f"Processing Nmap scan: {filepath} ...")
            with open(filepath) as file: 
                process_nmap_scan_xml(file.read(), output)        
    
    if not len(output):
        print(f'\nNo devices provided. Report not generated.')
        return

    # Retrive CPEs for devices
    print('\nGetting device CPE ...')
    devices_retrive_cpe(config_ignore_os_nvd_check, config_nist_api_key, output)

    # Pull CVEs from NIST NVD
    print('\nGetting device CVE ...')
    generate_cve_report(config_ignore_os_nvd_check, config_nist_api_key, output)

    # Save output report to json file
    with open(config_output_filepath, 'w') as file:
        file.write(json.dumps(output, indent=4))

    print(f"\nReport saved to '{config_output_filepath}'")


if __name__ == '__main__':
    main()
